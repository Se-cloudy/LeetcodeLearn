'''
运算都是先转换成二进制再做运算的。数据也都是二进制的形态存储。因为底层电路实现简单充分，通断、高低电平自然表示01。未来量子计算机可能引入更多状态。

1、与:&
    1）清零
    如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。
    2）取一个数的指定位
    比如取数 X=1010 1110 的低4位，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位与运算（X&Y=0000 1110）即可得到X的指定位。
    3）判断奇偶
    只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用if ((a & 1) == 0)代替if (a % 2 == 0)来判断a是不是偶数。
2、或:|
    1）常用来对一个数据的某些位设置为1
    比如将数 X=1010 1110 的低4位设置为1，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位或运算（X|Y=1010 1111）即可得到。
3、异或:^
    1）翻转指定位
    比如将数 X=1010 1110 的低4位进行翻转，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行异或运算（X^Y=1010 0001）即可得到。
    2）与0相异或值不变
    例如：1010 1110 ^ 0000 0000 = 1010 1110
    3）交换两个数（原地）
4、取反:~
    1）使一个数的最低位为零
    使a的最低位为0，可以表示为：a & ~1。~1的值为 1111 1111 1111 1110，再按"与"运算，最低位一定为0。因为" ~"运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。
5、左移:<< 高位舍弃，低位补零
    若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。
6、右移:>> 对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）
    将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。
    例如：a=a>>2 将a的二进制位右移2位，左补0 或者 左补1得看被移数是正还是负。
    操作数每右移一位，相当于该数除以2。
'''
# 字符变成二进制
a = '123'
x = int(a,2)
# int变成二进制序列 带有0b 取出的时候用res[2:]
b = 17
res = bin(b)